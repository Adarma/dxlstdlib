/*
    Copyright 2010 by Mathias Mamsch
    This file is part of the DOORS Standard Library 

    The DOORS Standard Library  is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The DOORS Standard Library  is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the DOORS Standard Library.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <lib/DXLstdlib.inc>
#include <lib/test/testFramework.inc>

#include <lib/core/oleHelpers.inc>
#include <lib/XMLDocument.inc>

print "Testing XML Functions ... "

void testCache (XMLDocument x, int sollCount) {
    int cacheCount = 0; int cacheItem; 
    for cacheItem in getTagCache_ x do cacheCount++; 
    test ("Cache Test", cacheCount "", sollCount "", 1) 
}


// -------------------------- Tests for XMLDocument-------------------------
{
    
    {
        XMLDocument x = create_XMLDocument() 
        
        testCache (x, 0)
        
        test ("Create XML Doc Test", "false", (null x) "")    
        delete_XMLDocument x     
        
        test ("Delete XML Doc Test", "true", (null x) "")    
    }

    {
        XMLDocument x = create_XMLDocument()    
        
        XMLTag v = create_XMLTag (x, "Hallo") 
        test ("Create Root Node not NULL", "false", (null v) "")
        test ("Empty XML Test", "", getXML x)
        testCache (x, 1)
                
        appendChild (x, v) 
        test ("Append Root Node XML", "<Hallo/>\r\n", getXML x )

        XMLTag v2 = create_XMLTag (x, "Dude") 
        appendChild(v, v2)         
        test ("Append Child Node XML", "<Hallo><Dude/></Hallo>\r\n", getXML x )

        testCache (x, 2)
        
        XMLTag v3 = create_XMLTag (x, "Fuck") 
        insertChildBefore(v2, v3) 
        test ("Insert Child Before XML", "<Hallo><Fuck/><Dude/></Hallo>\r\n", getXML x )
        
        setText (v3, "Test What &>") 
        test ("setText", "<Hallo><Fuck>Test What &amp;&gt;</Fuck><Dude/></Hallo>\r\n", getXML x )
        test ("getText", "Test What &>", getText v3 )

        setText (v3, "1\nwanna \t be a kennedy") 
        test ("getText", "1\nwanna \t be a kennedy", getText v3 )
        testCache (x, 3)

        delete_XMLTag v
        testCache (x, 2)
        
        delete_XMLTag v2
        testCache (x, 1)
        
        delete_XMLTag v3
        testCache (x, 0)
        
        delete_XMLDocument x     
    }

    {
        XMLDocument x = create_XMLDocument()            
        XMLTag v 
        
        v= appendTag (x, "xls:Document") 
        setAttribute (v, "xsl:Test", "Value") 
        test ("setAttribute", "<xls:Document xsl:Test=\"Value\"/>\r\n", getXML x)
        test ("getAttribute", "Value", getAttribute (v, "xsl:Test"))
        test ("getAttribute", null, getAttribute (v, "xyz"))
                        
        delete_XMLTag v
        delete_XMLDocument x
    }    

    
    {
        string validXML = "<?xml version=\"1.0\"?><food><vegetable>salad</vegetable><vegetable>zuchini</vegetable><fruit>banana</fruit></food>"     // "
        XMLDocument x = create_XMLDocument()            
        test ("Load invalid XML" , "false", loadXML (x,  "<" validXML) "" )
        test ("Load valid XML"   , "true" , loadXML (x, validXML) "")
        
        XMLNodelist nl = selectNodes (x, "/food/vegetable")
        test ("XMLNodelist count", "2", (count nl) "") 
        
        XMLTag v = getItem (nl, 0) 
        test ("XMLNodelist getItem", "false", (null v) "")        
        test ("XMLNodelist selectNodes", "salad", getText v) 
        delete_XMLTag v
        
        v = getItem (nl, 1) 
        test ("XMLNodelist selectNodes", "zuchini", getText v) 
        delete_XMLTag v
        
        resetIterator nl
        
        v = nextNode nl
        test ("XMLNodelist nextNode NOT NULL", "false", (null v) "")        
        test ("XMLNodelist nextNode", "salad", getText v) 
        delete_XMLTag v
        
        v = nextNode nl
        test ("XMLNodelist nextNode", "zuchini", getText v) 
        delete_XMLTag v
        
        resetIterator nl
        v = nextNode nl
        test ("XMLNodelist resetIterators", "salad", getText v) 
        delete_XMLTag v        

        v = nextNode nl
        v = nextNode nl
        test ("XMLNodelist no more items", "true", (null v) "")

        delete_NodeList nl 
        
        test ("delete nodelist", "true", (null nl) "")
        
        v = selectSingleNode (x, "/food/fruit")
        test ("Select Single Node", "banana", getText v)
        delete_XMLTag v
        
        delete_XMLDocument x
    }

    {
        string validXML = "<n1><n2/><n3/><n4><n5/><n6><n7/><n8/></n6></n4></n1>"     // "
        XMLDocument x = create_XMLDocument()            
        test ("Load valid XML"   , "true"    , loadXML (x, validXML) "" )
      
        XMLTag v = selectSingleNode (x, "/")
        test ("Select Single node with result", "false", (null v) "") 

        XMLNodelist nl = childNodes v
        test ("one root node test", "1", (count nl) "")
        
        delete_NodeList nl
        
        v = selectSingleNode (x, "/n1")
        nl = childNodes v
        test ("one root node test", "3", (count nl) "")
        
        delete_NodeList nl
        
        delete_XMLDocument x
    }
    
    {
        string validXML = "<?xml version=\"1.0\"?><hello-world><greeter>Dude</greeter><greeting>Whaasup?!</greeting></hello-world>"     // "
        string xlstSheet = "<?xml version=\"1.0\"?><xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">
<xsl:output method=\"text\"/>
<xsl:template match=\"/hello-world\"><xsl:value-of select=\"greeting\"/><xsl:apply-templates select=\"greeter\"/></xsl:template>
<xsl:template match=\"greeter\"> from <xsl:value-of select=\".\"/></xsl:template></xsl:stylesheet>
"    // "

        XMLDocument xdTransform = create_XMLDocument(); 
        test ("Load transform XML"   , "true", loadXML (xdTransform, validXML)  "")

        XMLDocument xdStyle = create_XMLDocument(); 
        test ("Load transform stylesheet", "true", loadXML (xdStyle, xlstSheet)  "")

    
        string x = transformDocument (xdTransform, xdStyle) 
        test ("Transformation test", "Whaasup?! from Dude", x) 

        delete_XMLDocument xdTransform
        delete_XMLDocument xdStyle        
    }
    
}

reportErrors()


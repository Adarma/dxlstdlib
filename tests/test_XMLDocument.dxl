/*
    Copyright 2010 by Mathias Mamsch
    This file is part of the DOORS Standard Library 

    The DOORS Standard Library  is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The DOORS Standard Library  is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the DOORS Standard Library.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <lib/testFramework.inc>
#include <lib/XMLDocument.inc>

print "Testing XML Functions ... "

void testCache (XMLDocument x, int sollCount) {
    int cacheCount = 0; int cacheItem; 
    for cacheItem in getTagCache_ x do cacheCount++; 
    test ("Cache Test", cacheCount "", sollCount "", 1) 
}


// -------------------------- Tests for XMLDocument-------------------------
{
    
    {
        XMLDocument x = create_XMLDocument() 
        
        testCache (x, 0)
        
        test("Create XML Doc Test", (null x) "", "false")    
        delete_XMLDocument x     
        
        test("Delete XML Doc Test", (null x) "", "true")    
    }

    {
        XMLDocument x = create_XMLDocument()    
        
        XMLTag v = create_XMLTag (x, "Hallo") 
        test("Create Root Node not NULL", (null v) "", "false")
        test("Empty XML Test", getXML x, "")
        testCache (x, 1)
                
        appendChild (x, v) 
        test("Append Root Node XML", getXML x , "<Hallo/>\r\n")

        XMLTag v2 = create_XMLTag (x, "Dude") 
        appendChild(v, v2)         
        test("Append Child Node XML", getXML x , "<Hallo><Dude/></Hallo>\r\n")

        testCache (x, 2)
        
        XMLTag v3 = create_XMLTag (x, "Fuck") 
        insertChildBefore(v2, v3) 
        test("Insert Child Before XML", getXML x , "<Hallo><Fuck/><Dude/></Hallo>\r\n")
        
        setText (v3, "Test What &>") 
        test("setText", getXML x , "<Hallo><Fuck>Test What &amp;&gt;</Fuck><Dude/></Hallo>\r\n")
        test("getText", getText v3 , "Test What &>")

        setText (v3, "1\nwanna \t be a kennedy") 
        test("getText", getText v3 , "1\nwanna \t be a kennedy")
        testCache (x, 3)

        delete_XMLTag v
        testCache (x, 2)
        
        delete_XMLTag v2
        testCache (x, 1)
        
        delete_XMLTag v3
        testCache (x, 0)
        
        delete_XMLDocument x     
    }

    {
        XMLDocument x = create_XMLDocument()            
        XMLTag v 
        
        v= appendTag (x, "xls:Document") 
        setAttribute (v, "xsl:Test", "Value") 
        test ("setAttribute", getXML x, "<xls:Document xsl:Test=\"Value\"/>\r\n")
        test ("getAttribute", getAttribute (v, "xsl:Test"), "Value")
        test ("getAttribute", getAttribute (v, "NoAttribute"), "")
                        
        delete_XMLTag v
        delete_XMLDocument x     
    }    

    
    {
        string validXML = "<?xml version=\"1.0\"?><food><vegetable>salad</vegetable><vegetable>zuchini</vegetable><fruit>banana</fruit></food>"     // "
        XMLDocument x = create_XMLDocument()            
        test ("Load invalid XML" , loadXML (x, "<" validXML) "", "false" )
        test ("Load valid XML"   , loadXML (x, validXML    ) "", "true"  )
        
        XMLNodelist nl = selectNodes (x, "/food/vegetable")
        test ("XMLNodelist count", (count nl) "", "2") 
        
        XMLTag v = getItem (nl, 0) 
        test ("XMLNodelist getItem", (null v) "", "false")        
        test ("XMLNodelist selectNodes", getText v, "salad") 
        delete_XMLTag v
        
        v = getItem (nl, 1) 
        test ("XMLNodelist selectNodes", getText v, "zuchini") 
        delete_XMLTag v
        
        resetIterator nl
        
        v = nextNode nl
        test ("XMLNodelist nextNode NOT NULL", (null v) "", "false")        
        test ("XMLNodelist nextNode", getText v, "salad") 
        delete_XMLTag v
        
        v = nextNode nl
        test ("XMLNodelist nextNode", getText v, "zuchini") 
        delete_XMLTag v
        
        resetIterator nl
        v = nextNode nl
        test ("XMLNodelist resetIterators", getText v, "salad") 
        delete_XMLTag v        

        v = nextNode nl
        v = nextNode nl
        test ("XMLNodelist no more items", (null v) "", "true")

        delete_NodeList nl 
        
        test ("delete nodelist", (null nl) "", "true")
        
        v = selectSingleNode (x, "/food/fruit")
        test ("Select Single Node", getText v, "banana")
        delete_XMLTag v
        
        delete_XMLDocument x
    }

    {
        string validXML = "<n1><n2/><n3/><n4><n5/><n6><n7/><n8/></n6></n4></n1>"     // "
        XMLDocument x = create_XMLDocument()            
        test ("Load valid XML"   , loadXML (x, validXML    ) "", "true"  )
      
        XMLTag v = selectSingleNode (x, "/")
        test ("Select Single node with result", (null v) "", "false") 

        XMLNodelist nl = childNodes v
        test ("one root node test", (count nl) "", "1")
        
        delete_NodeList nl
        
        v = selectSingleNode (x, "/n1")
        nl = childNodes v
        test ("one root node test", (count nl) "", "3")
        
        delete_NodeList nl
        
        delete_XMLDocument x
    }
    
    {
        string validXML = "<?xml version=\"1.0\"?><hello-world><greeter>Dude</greeter><greeting>Whaasup?!</greeting></hello-world>"     // "
        string xlstSheet = "<?xml version=\"1.0\"?><xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">
<xsl:output method=\"text\"/>
<xsl:template match=\"/hello-world\"><xsl:value-of select=\"greeting\"/><xsl:apply-templates select=\"greeter\"/></xsl:template>
<xsl:template match=\"greeter\"> from <xsl:value-of select=\".\"/></xsl:template></xsl:stylesheet>
"    // "

        XMLDocument xdTransform = create_XMLDocument(); 
        test ("Load transform XML"   , loadXML (xdTransform, validXML)  "", "true"  )

        XMLDocument xdStyle = create_XMLDocument(); 
        test ("Load transform stylesheet"   , loadXML (xdStyle, xlstSheet)  "", "true"  )

    
        string x = transformDocument (xdTransform, xdStyle) 
        test ("Transformation test", x, "Whaasup?! from Dude") 

        delete_XMLDocument xdTransform
        delete_XMLDocument xdStyle        
    }
    
}

reportErrors()

